:tocdepth: 2


.. _corerule:

==============================
コアルール
==============================

コアルールは割込み処理が可能なターン制ゲームの開始から勝敗が決まるまでを定義します。

.. index::
   single: ターン

ターン
==============================
このルールを説明する上でターンとは持つことができるものとします。
ターンを持っているプレイヤーは先に行動できます。
ターンを持っているプレイヤーをターンプレイヤーといいます。

.. index::
   single: アクション(コア)

アクション
==============================
アクションとは、プレイヤーの行動を示します。
ターン制のゲームでは、プレイヤーは様々な行動を行います。
チェスであればコマを進めたり、ババ抜きであれば隣の人からカードを引くなどがあります。
それらをアクションと定義します。

.. index::
   single: チャンス

チャンス
==============================
アクションを起こすことができる機会をチャンスといいます。
チャンスを持っている間は何度でもアクションを起こすことができます。

.. index::
   single: ステージ

ステージ
==============================
アクションの解決順を整理するために使う領域です。
後入れ先出し方式で最後に積まれたアクションから順に解決されていきます。


アクションの定義項目
==============================
アクション、チャンス、ステージについて簡単に説明しました。
これらの概念を用いて、アクションに定義する項目を説明します。

アクションは次の項目を定義する必要があります。
他の項目は具体的にアクションを定義する際に、ゲームに合わせて追加して下さい。

 * 効果（通常効果・即時効果）
 * タイミング

.. index::
   double: つ|通常効果(コア);そ|即時効果(コア)

効果
------------------------------
効果とはアクションの解決時にプレイヤーが行う行動です。
効果の中には、通常効果と即時効果があります。
違いについては、図(:numref:`coreflow-2`)を説明する際に分岐条件として登場します。


.. index::
   single: タイミング(コア)

.. _timing:

タイミング
------------------------------
タイミングとは、アクションを起こすことができる時を示します。
タイミングには「メイン」と「クイック」の2種類あります。

.. index::
   single: メイン

メイン
    ターンプレイヤーかつステージが空の時に起こせるアクションです。

    条件をまとめると次のようになります。

    * チャンスを持っている
    * 自分のターン
    * ステージが空

.. index::
   single: クイック

クイック
    いつでも起こせるため、アクションをステージに積み重ねることができます。

    条件をまとめると次のようになります。

    * チャンスを持っている

------------------------------
エンドアクションの定義
------------------------------
定義するアクションの中で最低１つは
ターンを別のプレイヤーにわたす効果を定義してください。
そうしないと、ターンが別のプレイヤーに渡らす、ゲームが進行しなくなります。

------------------------------
アクションのコントローラー
------------------------------
アクションを起こしたプレイヤーをそのアクションのコントローラーと呼びます。
効果はこのコントローラー視点で解釈されることになります。


.. index::
   single: コンポーネント

.. _component:

コンポーネント
==============================
ゲームにてプレイヤーが保有する駒やカードのことをコンポーネントと定義します。
コンポーネントは次の項目を持っています。

.. index::
   single: オーナー

オーナー
    コンポーネントの所有者を示します。大体のトランプゲームではトランプを1セットしか用いないため無視されますが、TCGのデッキなど個人所有のものを用いるゲームでは必要な項目となります。

.. index::
   single: コントローラー

コントローラー
    現在そのコンポーネントを操作しているプレイヤーを示します。オーナーとコントローラーは基本同じプレイヤーが設定されますが、コントロールを奪うアクションがある場合、オーナーとコントローラーは異なります。

.. note:: コンポーネントとアクションのコントローラー

  コントローラーは制御している人という意味になるため、コンポーネントとアクションのコントローラー制御する対象が異なることになります。
  コンポーネントとアクションの属性を次の図に示します。アクションにはオーナーがいない点が異なります。

  .. uml:: 
   :caption: コンポーネントとアクションの属性

   hide methods
   hide circle

   class コンポーネント {
    オーナー
    コントローラー
   }

   class アクション {
    コントローラー
   }


.. index::
   single: の|能力(コア)

能力
==============================
.. ターン制ゲームの中には、プレイヤーごとに起こせるアクションが異なる場合があります。

.. コアルールではそのプレイヤーごとに起こせるアクションの違いを能力によって定義します。

.. 例えば、

.. そのアクションを起こせる能力を持っているとします。

能力とはアクションの効果とは異なる概念で、アクションを起こすことができたり、 アクションを誘発したりすることがでる力です。

能力を持つことができるのは、プレイヤーの他に駒やカードなどのゲームに登場するコンポーネントも持つことができます。
(:numref:`ability_image`)

.. _ability_image:
.. uml:: ability.puml
   :caption: 能力のイメージ


能力には、次の種類があります。

.. index::
   single: じ|常在型能力

常在型能力
    能力が有効である場合、継続的に発揮される能力

.. index::
   single: ゆ|誘発型能力

誘発型能力
    能力が有効である間に何かの契機でアクションを起こす能力

概ねのゲームでは、
ターン終了や駒をすすめるなどのアクションが定義されています。
そして、そのアクションを起こせる能力（常在型能力）を
プレイヤーは保持しています。

.. index::
   single: コアフロー

.. _coreflowsec:

コアフロー
==============================
この図にゲームの開始から勝敗が決まるまでの流れが集約されいます。(:numref:`coreflow-2`)

.. _coreflow-2:

.. uml:: coreflow.puml
   :caption: コアフロー


.. _core_gamestart:

[1]ゲーム開始
------------------------------
先攻を決め、ゲームを始める準備を行います。


[2]ターンプレイヤーにチャンスを移動
------------------------------------------------------------
ターンを持っているプレイヤーにチャンスを移動します。


[3]アクションを起こすか？
------------------------------
チャンスを持っているプレイヤーはアクションを起こすかを判断します。


[4]パス記録のリセット
------------------------------
パスしたプレイヤーの記録をリセットします。


[5]アクションを起こす
------------------------------
アクションを起こしこれからプレイヤーが行うことを宣言します。
ゲームによってアクションの起こし方は異なります。BlackPokerではアクション名を言い、コストの支払や対象を指定しアクションを起こします。
一方ババ抜きでは、隣のプレイヤーからカードを引く際に宣言せず暗黙にアクションが起きている場合もあります。


[6]誘発チェック
------------------------------
ここに至るまでに誘発したアクションがないかチェックします。誘発した場合、効果を解決するかスタックに追加します。詳しいフローは :numref:`trigger-check` を参照してください。


[7]即時効果か？
------------------------------
起こしたアクションが即時効果か通常効果か判定します。


.. _actresolve:

[8]アクションの解決
------------------------------
アクションの効果に定義されている内容を実行します。
その他にコンポーネントを捨て山に移動するなどゲームによって決まった処理があれば行います。
アクションの解決の中でも効果に定義されている内容を実行することのみを指す場合「効果を発揮する」と言います。

.. _winlose:

[9]勝敗判定
------------------------------
ゲームの勝敗を判定します。決着した場合ゲームが終了します。判定の方法はゲームにより異なります。


[10]ステージに追加
------------------------------
ステージというアクションを貯めておける領域に追加します。


[11]パス記録に登録
------------------------------
パスしたプレイヤーを記録します。パス記録がリセットされるため、同じプレイヤー名は2回登録されません。


[12]全員がパスしたか？
------------------------------------------------------------
パス記録に全てのプレイヤー名が記録されているか判定します。


[13]ステージにアクションが存在するか？
------------------------------------------------------------
ステージにアクションが存在するか判定します。

[14]ステージから取出し
------------------------------
最後にステージに追加されたアクションをステージから取出します。


[15]チャンス移動
------------------------------
チャンスを持っているプレイヤーからチャンスを持っていないプレイヤーにチャンスを移動します。
チャンスを移動するルールはゲームによって異なります。


.. _trigger-check:

誘発チェック
------------------------------

能力の中でも誘発型能力は、なにかをきっかけにしてアクションが起きる条件が定義されています。
誘発する条件は「〜の場合」、「〜時」などで記載されており、誘発するアクションは「〜を誘発する」と記載されています。

誘発チェックでは、誘発したアクションの効果を解決もしくは、ステージに追加します。
誘発したアクションのコントローラーは起因となった誘発型能力を持ったコンポーネントのコントローラーになります。
誘発チェックは次の図のように行います。(:numref:`trigger-flow`)


.. _trigger-flow:
.. uml:: triggerflow.puml
   :caption: 誘発チェック


.. _trigger-act-gather:

------------------------------------------------------------------------------------------------------------------------
[6-1]誘発したアクションをプレイヤー毎の誘発即時リストと誘発通常リストに追加
------------------------------------------------------------------------------------------------------------------------
全てのプレイヤー、コンポーネントが持っている誘発型能力を確認します。
誘発したアクションをコントローラーのプレイヤー毎に即時効果と通常効果に分け、
プレイヤー毎の誘発即時リスト、誘発通常リストに追加します。

------------------------------------------------------------------------------------------------------------------------
[6-2]誘発即時リスト、誘発通常リスト全体の件数判定
------------------------------------------------------------------------------------------------------------------------
プレイヤー毎の誘発即時リスト、誘発通常リストの合計件数を判定します。

------------------------------------------------------------------------------------------------------------------------
[6-3]プレイヤー毎に誘発即時リストの即時効果のアクションを解決
------------------------------------------------------------------------------------------------------------------------
プレイヤー毎に誘発即時リストの即時効果のアクションを解決を行います。
順番はターンプレイヤーからターンが回る順にプレイヤー毎に行います。

------------------------------------------------------------
[6-4]誘発即時リストから即時効果のアクションを1つ取り出す
------------------------------------------------------------
順番のプレイヤーは、 プレイヤー毎の誘発即時リストから1つ即時効果のアクションを取り出します。
取り出すアクションは任意に選択できます。


------------------------------------------------------------
[6-5]即時効果のアクションを解決
------------------------------------------------------------
アクションの効果を解決します。
詳しくは :numref:`actresolve` 参照。


------------------------------
[6-6]勝敗判定
------------------------------
勝敗を判定します。
詳しくは :numref:`winlose` 参照。


----------------------------------------------------------------------------------------------------
[6-7]誘発したアクションをプレイヤー毎の誘発即時リスト、誘発通常リストに追加
----------------------------------------------------------------------------------------------------
詳しくは :numref:`trigger-act-gather` 参照。

--------------------------------------------------
[6-8]誘発即時リストの件数が0件でなけば繰り返す
--------------------------------------------------
順番のプレイヤーの誘発即時リストに未解決の即時効果がある場合、
即時効果の解決を繰返します。

----------------------------------------------------------------------------------------------------
[6-9]全ての誘発即時リストの件数が0件でなければ繰り返す
----------------------------------------------------------------------------------------------------
プレイヤー毎の誘発即時リストに未解決のアクションがある場合、
再びプレイヤー毎に誘発即時リストの即時効果の解決を繰返します。

----------------------------------------------------------------------------------------------------
[6-10]プレイヤー毎に誘発通常リストのアクションをステージに追加
----------------------------------------------------------------------------------------------------
プレイヤー毎に誘発通常リストのアクションをステージに追加します。
順番はターンプレイヤーからターンが回る順にプレイヤー毎に行います。


----------------------------------------------------------------------------------------------------
[6-11]通常効果のアクションを任意の順でステージに追加
----------------------------------------------------------------------------------------------------
順番のプレイヤーは、 プレイヤー毎の誘発通常リストからアクションを任意の順でステージに追加します。


----------------------------------------------------------------------------------------------------
[6-12]誘発したアクションをプレイヤー毎に誘発即時リストと誘発通常リストにまとめる
----------------------------------------------------------------------------------------------------
詳しくは :numref:`trigger-act-gather` 参照。

--------------------------------------------------
[6-13]誘発通常リストにアクションがあれば繰り返す
--------------------------------------------------
プレイヤー毎の誘発通常リストにアクションがある場合、
順番を次のプレイヤーに渡し、プレイヤー毎に誘発通常リストのアクションをステージに追加します。


まとめ
==============================

コアルールについて説明しました。
すでにあるターン制のゲームからアクションを洗い出し、能力を整理することで割込処理を可能としゲームの新しい遊び方が見つけられます。
また、新しく作成するゲームに関してもコアルールを意識して作成することで、ルール追加がしやすいゲームが考えやすいと思います。
