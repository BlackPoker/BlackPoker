==============================
コアルール
==============================

コアルールでは、ターン制ゲームに適用できる割込み処理についてルールを定義します。

コアルールは、次の図を中心に説明します。(:numref:`coreflow-1`)
詳細は後ほど説明しますが、ゲーム開始から勝敗が決まるまでこの図に集約して説明します。

.. _coreflow-1:
.. uml:: coreflow.puml
   :caption: コアフロー


ターン
==============================
このルールを説明する上でターンとは、ターンは持つことができるものとします。
ターンを持っているプレイヤーは先に行動することができます。
ターンを持っているプレイヤーをターンプレイヤーといいます。


アクション
==============================
アクションとは、プレイヤーの行動を示します。
ターン制のゲームでは、プレイヤーは様々な行動を行います。
チェスであればコマを進めたり、ババ抜きであれば隣の人からカードを引くなどがあります。
それらをアクションと定義します。


------------------------------
アクションの項目
------------------------------

アクションは次の項目を定義する必要があります。
他の項目は具体的にアクションを定義する際に、ゲームに合わせて追加して下さい。

 * 効果（通常効果・即時効果）
 * タイミング


効果
------------------------------
効果とはその効果を発揮した際に、プレイヤーが行う行動です。
効果の中には、通常効果と即時効果があります。
違いについては、後述します。


タイミング
------------------------------
タイミングとは、アクションを起こすことができる時を示します。
タイミングには「メイン」と「クイック」の2種類あります。

.. todo:: タイミングについては説明しないほうがスッキリするかも？？

    メインとクイックについては後々説明

------------------------------
エンドアクションの定義
------------------------------
定義するアクションの中で最低１つは
ターンを別のプレイヤーにわたす効果を定義してください。
そうしないと、ターンが別のプレイヤーに渡らす、ゲームが進行しなくなります。

.. todo:: 例を書く

------------------------------
アクションのコントローラー
------------------------------
アクションを起こしたプレイヤーをそのアクションのコントローラーと呼びます。
効果はこのコントローラー視点で解釈されることになります。


チャンス
==============================
アクションを起こすことができる機会をチャンスといいます。
チャンスを持っている間は何度でもアクションを起こすことができます。


ステージ
==============================
アクションの解決順を整理するために使う領域です。
後入れ先出し方式で最後に積まれたアクションから順に解決されていきます。


コンポーネント
==============================
ゲームにてプレイヤーが保有する駒やカードのことをコンポーネントと定義します。
コンポーネントは次の項目を持っています。

オーナー
    コンポーネントの所有者を示します。大体のトランプゲームではトランプを1セットしか用いないため無視されますが、TCGのデッキなど個人所有のものを用いるゲームでは必要な項目となります。

コントローラー
    現在そのコンポーネントを操作しているプレイヤーを示します。オーナーとコントローラーは基本同じプレイヤーが設定されますが、コントロールを奪うアクションがある場合、オーナーとコントローラーは異なります。

.. note:: コンポーネントとアクションのコントローラー

  コントローラーは制御している人という意味になるため、コンポーネントとアクションのコントローラー制御する対象が異なることになります。
  コンポーネントとアクションの属性を次の図に示します。アクションにはオーナーがいない点が異なります。

  .. uml:: 
   :caption: コンポーネントとアクションの属性

   hide methods
   hide circle

   class コンポーネント {
    オーナー
    コントローラー
   }

   class アクション {
    コントローラー
   }





能力
==============================
.. ターン制ゲームの中には、プレイヤーごとに起こせるアクションが異なる場合があります。

.. コアルールではそのプレイヤーごとに起こせるアクションの違いを能力によって定義します。

.. 例えば、

.. そのアクションを起こせる能力を持っているとします。

能力とはアクションの効果とは異なる概念で、アクションを起こすことができたり、
アクションを誘発したりすることができます。

能力を持つことができるのは、プレイヤーの他に駒やカードなどのゲームに登場するコンポーネントも持つことができます。
(:numref:`ability_image`)

.. _ability_image:
.. uml:: ability.puml
   :caption: 能力のイメージ


能力には、次の種類があります。

常在型能力
    能力が有効である場合、継続的に発揮される能力

誘発型能力
    能力が有効である間に何かの契機でアクションを起こす能力

概ねのゲームでは、
ターン終了や駒をすすめるなどのアクションが定義されています。
そして、そのアクションを起こせる能力（常在型能力）を
プレイヤーは保持しています。



コアフロー
==============================
ここまでの説明を踏まえて、冒頭に紹介した図を説明します。(:numref:`coreflow-2`)
この図にゲームの開始から勝敗が決まるまでの流れが集約されいます。

.. _coreflow-2:
.. uml:: coreflow.puml
   :caption: コアフロー


①ゲーム開始
    先攻を決め、ゲームを始める準備を行います。

②ターンプレイヤーにチャンスを移動
    ターンを持っているプレイヤーにチャンスを移動します。

③ステージが空か？
    ステージにアクションが存在していないか判定します。

④パス名簿リセット
    パスしたプレイヤーを記録するパス名簿をリセットします。

⑤アクション起こす
    アクションを起こしこれからプレイヤーが行うことを宣言します。
    ゲームによってアクションの起こし方は異なります。BlackPokerではアクション名を言い、コストの支払や対象を指定しアクションを起こします。
    一方ババ抜きでは、隣のプレイヤーからカードを引く際に宣言せず暗黙にアクションが起きている場合もあります。

⑥即時効果か？
    起こしたアクションが即時効果か通常効果か判定します。

⑦効果解決
    アクションの効果に定義されている内容を実行します。

⑧勝敗判定
    ゲームの勝敗を判定します。判定の方法はゲームにより異なります。

⑨ステージに追加
    ステージというアクションを貯めておける領域に追加します。

⑩誘発チェック
    ここに至るまでに誘発したアクションがないかチェックします。誘発した場合、効果を解決するかスタックに追加します。詳しいフローは :ref:`trigger` を参照してください。

⑪アクションを起こすか？
    チャンスを持っているプレイヤーはアクションを起こすかを判断します。

⑫パス名簿に登録
    パスしたプレイヤーを記録するパス名簿に登録します。同じプレイヤー名は2回登録されません。

⑬パス名簿の件数=プレイヤー数か？
    パス名簿の件数がゲームに参加しているプレイヤーの数と一致しているか判定します。

⑭ステージから取出し
    最後にステージに追加されたアクションをステージから取出します。

⑮チャンス移動
    チャンスを持っているプレイヤーからチャンスを持っていないプレイヤーにチャンスを移動します。
    チャンスを移動するルールはゲームによって異なります。



.. _trigger:
------------------------------
誘発チェック
------------------------------
なにかをきっかけにしてアクションが誘発する場合があります。
誘発とは、特定の条件を満たした時にアクションが自動的に起こることを指します。
誘発チェックでは、誘発したアクションの効果を解決もしくは、ステージに追加します。

.. todo::
    コアルールに能力の説明を入れないと、誘発したアクションのコントローラーについて説明できない。。


能力の中にはアクションを誘発する能力があります。
誘発とは、特定の条件を満たした時にアクションが自動的に起こることを指します。


誘発チェックは次の図のように行います。(:numref:`trigger-flow`)


.. _trigger-flow:
.. uml:: triggerflow.puml
   :caption: 誘発チェック

⑩-1.即時誘発有無判定
    即時効果を持つアクション誘発していないか判定します。

⑩-2.効果解決&勝敗判定
    誘発した即時効果をプレイヤー毎に任意の順番で解決します。
    解決するプレイヤーの順序は、
    ターンプレイヤーがコントローラーとなっているアクションを全て解決してから、
    ターンプレイヤー以外がコントローラーとなっているアクションを解決します。
    この解決順序は、ゲームによって変更できます。

    効果を解決する毎に勝敗判定を行ってください。

⑩-3.誘発有無判定
    通常効果を持つアクション誘発していないか判定します。

⑩-4.ステージに追加
    誘発したアクションをプレイヤー毎に任意の順番でステージに追加します。
    ステージに追加するプレイヤーの順序は、
    ターンプレイヤーがコントローラーとなっているアクションを全てステージに追加してから、
    ターンプレイヤー以外がコントローラーとなっているアクションをステージに追加します。
    この解決順序は、ゲームによって変更できます。
