.. _core.rst:

==============================
コアルール
==============================

コアルールは割込み処理が可能なターン制ゲームの開始から勝敗が決まるまでを定義します。

.. index::
    single: ターン

ターン
==============================
このルールを説明する上でターンとは持つことができるものとします。
ターンを持っているプレイヤーは先に行動できます。
ターンを持っているプレイヤーをターンプレイヤーといいます。

.. index::
    single: アクション(コア)

アクション
==============================
アクションとは、プレイヤーの行動を示します。
ターン制のゲームでは、プレイヤーは様々な行動を行います。
チェスであればコマを進めたり、ババ抜きであれば隣の人からカードを引くなどがあります。
それらをアクションと定義します。

.. index::
    single: チャンス

チャンス
==============================
アクションを起こすことができる機会をチャンスといいます。
チャンスを持っている間は何度でもアクションを起こすことができます。

.. index::
    single: ステージ

ステージ
==============================
アクションの解決順を整理するために使う領域です。
後入れ先出し方式で最後に積まれたアクションから順に解決されていきます。


アクションの定義項目
==============================
アクション、チャンス、ステージについて簡単に説明しました。
これらの概念を用いて、アクションに定義する項目を説明します。

アクションは次の項目を定義する必要があります。
他の項目は具体的にアクションを定義する際に、ゲームに合わせて追加して下さい。

 * 効果（通常効果・即時効果）
 * タイミング

.. index::
    double: つ|通常効果(コア);そ|即時効果(コア)

効果
------------------------------
効果とはアクションの解決時にプレイヤーが行う行動です。
効果の中には、通常効果と即時効果があります。
違いについては、図(:numref:`coreflow-2`)を説明する際に分岐条件として登場します。


.. index::
    single: タイミング(コア)

.. _timing:

タイミング
------------------------------
タイミングとは、アクションを起こすことができる時を示します。
タイミングには「メイン」と「クイック」の2種類あります。

.. index::
    single: メイン

メイン
    ターンプレイヤーかつステージが空の時に起こせるアクションです。

    条件をまとめると次のようになります。

    * チャンスを持っている
    * 自分のターン
    * ステージが空

.. index::
    single: クイック

クイック
    いつでも起こせるため、アクションをステージに積み重ねることができます。

    条件をまとめると次のようになります。

    * チャンスを持っている

------------------------------
エンドアクションの定義
------------------------------
定義するアクションの中で最低１つは
ターンを別のプレイヤーにわたす効果を定義してください。
そうしないと、ターンが別のプレイヤーに渡らす、ゲームが進行しなくなります。

------------------------------
アクションのコントローラー
------------------------------
アクションを起こしたプレイヤーをそのアクションのコントローラーと呼びます。
効果はこのコントローラー視点で解釈されることになります。


.. index::
    single: コンポーネント

.. _component:

コンポーネント
==============================
ゲームにてプレイヤーが保有する駒やカードのことをコンポーネントと定義します。
コンポーネントは次の項目を持っています。

.. index::
    single: オーナー

オーナー
    コンポーネントの所有者を示します。大体のトランプゲームではトランプを1セットしか用いないため無視されますが、TCGのデッキなど個人所有のものを用いるゲームでは必要な項目となります。

.. index::
    single: コントローラー

コントローラー
    現在そのコンポーネントを操作しているプレイヤーを示します。オーナーとコントローラーは基本同じプレイヤーが設定されますが、コントロールを奪うアクションがある場合、オーナーとコントローラーは異なります。

.. note:: コンポーネントとアクションのコントローラー

    コントローラーは制御している人という意味になるため、コンポーネントとアクションのコントローラー制御する対象が異なることになります。
    コンポーネントとアクションの属性を次の図に示します。アクションにはオーナーがいない点が異なります。

.. uml:: 
    :caption: コンポーネントとアクションの属性
    :scale: 50%

    hide methods
    hide circle

    class コンポーネント {
    オーナー
    コントローラー
    }

    class アクション {
    コントローラー
    }


.. index::
    single: の|能力(コア)

能力
==============================
.. ターン制ゲームの中には、プレイヤーごとに起こせるアクションが異なる場合があります。

.. コアルールではそのプレイヤーごとに起こせるアクションの違いを能力によって定義します。

.. 例えば、

.. そのアクションを起こせる能力を持っているとします。

能力とはアクションの効果とは異なる概念で、アクションを起こすことができたり、 アクションを誘発したりすることがでる力です。

能力を持つことができるのは、プレイヤーの他に駒やカードなどのゲームに登場するコンポーネントも持つことができます。
(:numref:`ability_image`)

.. _ability_image:
.. uml:: ability.puml
    :caption: 能力のイメージ
    :scale: 50%


能力には、次の種類があります。

.. index::
    single: じ|常在型能力

常在型能力
    能力が有効である場合、継続的に発揮される能力

.. index::
    single: ゆ|誘発型能力

誘発型能力
    能力が有効である間に何かの契機でアクションを起こす能力

概ねのゲームでは、
ターン終了や駒をすすめるなどのアクションが定義されています。
そして、そのアクションを起こせる能力（常在型能力）を
プレイヤーは保持しています。

.. index::
    single: コアフロー

.. _coreflowsec:

コアフロー
==============================
この図にゲームの開始から勝敗が決まるまでの流れが集約されいます。(:numref:`coreflow-2`)

.. _coreflow-2:

.. uml:: coreflow.puml
    :caption: コアフロー
    :scale: 50%

.. _core_gamestart:

[1]ゲーム開始
    先攻を決め、ゲームを始める準備を行います。


[2]ターンプレイヤーにチャンスを移動
    ターンを持っているプレイヤーにチャンスを移動します。


[3]アクションを起こすか？
    チャンスを持っているプレイヤーはアクションを起こすかを判断します。


[4]パス記録のリセット
    パスしたプレイヤーの記録をリセットします。


[5]アクションを起こす
    アクションを起こしこれからプレイヤーが行うことを宣言します。
    ゲームによってアクションの起こし方は異なります。BlackPokerではアクション名を言い、コストの支払や対象を指定しアクションを起こします。
    一方ババ抜きでは、隣のプレイヤーからカードを引く際に宣言せず暗黙にアクションが起きている場合もあります。


[6]誘発チェック
    ここに至るまでに誘発したアクションがないかチェックします。誘発した場合、効果を解決するかスタックに追加します。詳しいフローは :numref:`trigger-check` を参照してください。


[7]即時効果か？
    起こしたアクションが即時効果か通常効果か判定します。


.. _actresolve:

[8]アクションの解決
    アクションの効果に定義されている内容を実行します。
    その他にコンポーネントを捨て山に移動するなどゲームによって決まった処理があれば行います。
    アクションの解決の中でも効果に定義されている内容を実行することのみを指す場合「効果を発揮する」と言います。

.. _winlose:

[9]勝敗判定
    ゲームの勝敗を判定します。決着した場合ゲームが終了します。判定の方法はゲームにより異なります。


[10]ステージに追加
    ステージというアクションを貯めておける領域に追加します。


[11]パス記録に登録
    パスしたプレイヤーを記録します。パス記録がリセットされるため、同じプレイヤー名は2回登録されません。


[12]全員がパスしたか？
    パス記録に全てのプレイヤー名が記録されているか判定します。


[13]ステージにアクションが存在するか？
    ステージにアクションが存在するか判定します。


[14]ステージから取出し
    最後にステージに追加されたアクションをステージから取出します。


[15]チャンス移動
    チャンスを持っているプレイヤーからチャンスを持っていないプレイヤーにチャンスを移動します。
    チャンスを移動するルールはゲームによって異なります。


.. _trigger-check:

誘発チェック
------------------------------

能力の中でも誘発型能力は、なにかをきっかけにしてアクションが起きる条件が定義されています。
誘発する条件は「〜の場合」、「〜時」などで記載されており、誘発するアクションは「〜を誘発する」と記載されています。

誘発チェックでは、誘発したアクションの効果を解決またはステージに追加します。
誘発したアクションのコントローラーは起因となった誘発型能力を持ったコンポーネントのコントローラーとなります。
誘発チェックは次の図のように行います。(:numref:`trigger-flow`)


.. _trigger-flow:
.. uml:: triggerflow.puml
    :caption: 誘発チェック
    :scale: 50%



.. _trigger-act-gather:

**[6-1] 誘発したアクションを分類しバッファに追加**  
    各プレイヤーが発生させた誘発アクションを、効果の種類（即時効果または通常効果）および  
    タイミング（メインまたはクイック）に基づいて分類し、一旦アクションバッファに追加します。

**[6-2] バッファは空か？**  
    アクションバッファが空であるかどうかを判定します。  
    未処理のアクションが残っている場合は、以降の処理ループを継続します。

**[6-3] バッファに即時効果はあるか？**  
    アクションバッファ内に即時効果アクションが存在するかを判定します。  
    未処理の即時効果アクションが残っている場合、  
    ターンプレイヤーから順に即時効果の処理グループへ進みます。

**[6-4] 該当プレイヤーに即時効果があるか？**  
    現在対象となっているプレイヤーのアクションバッファを確認し、  
    即時効果アクションが存在するかを判定します。  
    存在しない場合は、そのプレイヤーでの処理を終了し、次のプレイヤーへ移行します。

**[6-5] タイミング=メインの即時アクションを処理**  
    該当プレイヤーについて、タイミングが「メイン」の即時効果アクションを実行します。  
    詳細は :numref:`trigger-act-s` をタイミング=メインとして参照してください。

**[6-6] タイミング=クイックの即時アクションを処理**  
    同じプレイヤーについて、タイミングが「クイック」の即時効果アクションを実行します。  
    詳細は :numref:`trigger-act-s` をタイミング=クイックとして参照してください。

**[6-7] 次のプレイヤーへ**  
    現在のプレイヤーでの即時効果アクションの処理が完了した後、  
    ターン順に次のプレイヤーへ処理を移行します。

**[6-8] バッファに通常効果はあるか？**  
    アクションバッファ内に通常効果アクションが存在するかを判定します。  
    未処理の通常効果アクションが残っている場合、  
    通常効果の処理グループへ進みます。

**[6-9] 該当プレイヤーに通常効果があるか？**  
    現在対象となっているプレイヤーのアクションバッファを確認し、  
    通常効果アクションが存在するかを判定します。  
    存在しない場合は、そのプレイヤーでの処理を終了し、次のプレイヤーへ移行します。

**[6-10] タイミング=メインの通常アクションを処理**  
    該当プレイヤーについて、タイミングが「メイン」の通常効果アクションを実行します。  
    詳細は :numref:`trigger-act-n` をタイミング=メインとして参照してください。

**[6-11] タイミング=クイックの通常アクションを処理**  
    同じプレイヤーについて、タイミングが「クイック」の通常効果アクションを実行します。  
    詳細は :numref:`trigger-act-n` をタイミング=クイックとして参照してください。

**[6-12] 次のプレイヤーへ**  
    現在のプレイヤーでの通常効果アクションの処理が完了した後、  
    ターン順に次のプレイヤーへ処理を移行します。

.. note::
   各処理グループ内では、必ずターンプレイヤーから始まり、  
   ターンが回る順に全プレイヤーに対して確認およびアクションの処理を実施します。  
   また、ループはアクションバッファに未処理のアクションが存在する限り繰り返されます。


.. _trigger-act-s:

------------------------------
誘発即時効果解決
------------------------------

誘発チェックで誘発した即時効果を処理します。
呼び出し元で指定されたプレイヤーおよびタイミングに基づいて処理します。
誘発チェックは次の図のように行います。(:numref:`trigger-flow_s`)


.. _trigger-flow_s:
.. uml:: triggerflow_s.puml
    :caption: 誘発チェック-即時効果処理
    :scale: 50%


**[6-5-1] バッファから該当の即時効果アクションがあるか？**  
    アクションバッファから、対象プレイヤーおよび該当タイミングの即時効果アクションを1件取り出せるかを判定します。  
    取り出し可能な場合、以降の処理へ進み、取り出せなくなるまでこのループを継続します。

**[6-5-2] バッファから即時効果アクションを取り出す**  
    条件を満たした即時効果アクションを、アクションバッファから実際に取り出します。  
    取り出されたアクションは、解決処理の対象となります。

**[6-5-3] 取り出した即時効果アクションの効果を解決する**  
    取り出された即時効果アクションの効果（例えば、ダメージ処理や特殊効果など）を実行し、  
    アクションの解決を行います。詳細な処理内容は、該当のアクション効果解決処理を参照してください。

**[6-5-4] 勝敗判定**  
    勝敗を判定します。
    詳しくは :ref:`winlose` 参照。

**[6-5-5] アクションが新たな誘発を発生させたか？**  
    即時効果アクションの解決後、実行したアクションが新たな誘発を発生させたかどうかを確認します。  
    発生している場合は、その誘発アクションを再度バッファに追加する必要があります。

**[6-5-6] 誘発したアクションをバッファに追加**  
    新たに発生した誘発アクションを、アクションバッファに追加します。  
    これにより、再帰的なアクション処理が可能となり、次のループで該当アクションの取り出し処理が実行されます。


.. _trigger-act-n:

------------------------------
通常効果：アクション毎に処理
------------------------------

誘発チェックで誘発した通常効果を処理します。
呼び出し元で指定されたプレイヤーおよびタイミングに基づいて処理します。
誘発チェックは次の図のように行います。(:numref:`trigger-flow_n`)


.. _trigger-flow_n:
.. uml:: triggerflow_n.puml
    :caption: 誘発チェック-通常効果処理
    :scale: 50%


**[6-10-1] バッファから該当の通常効果アクションがあるか？**
    アクションバッファから、呼び出し元から渡された対象プレイヤーおよび該当タイミングに合致する通常効果アクションが  
    1件取り出せるかどうかを判定します。取り出し可能な場合は以降の処理に進み、  
    取り出せなくなるまでこのループを継続します。

**[6-10-2] バッファから通常効果アクションを取り出す**  
    条件に合致する通常効果アクションを、アクションバッファから実際に取り出します。  
    取り出されたアクションは、次のタイミング判定の対象となります。

**[6-10-3] 取り出した通常効果のタイミングがメインか判定**  
    取り出された通常効果アクションのタイミングが「メイン」であるかどうかを判定します。  
    「Yes」と判定された場合は、ステージへの追加前に空き状況の確認へ進みます。  
    「No」の場合は、クイックタイミングとして処理を行います。

**[6-10-4] ステージが空か判定？**  
    タイミングがメインの場合、アクションをステージに追加できるかどうか、  
    すなわちステージに空きがあるかを判定します。

**[6-10-5] 通常効果アクションをステージに追加**  
    ステージが空いている場合、取り出した通常効果アクションをステージに追加します。  
    これにより、通常効果が次のフェーズで適用されます。

**[6-10-6] 通常効果アクションを破棄**  
    ステージが埋まっている場合、取り出した通常効果アクションを破棄します。  
    この処理により、ステージの状態に合わせた適切な処理が行われます。

**[6-10-7] タイミングがクイックの場合、通常効果アクションをステージに追加**  
    取り出した通常効果アクションのタイミングが「クイック」である場合、  
    ステージの空き状況にかかわらず無条件でアクションをステージに追加します。

**[6-10-8] アクションが誘発したかを判定**  
    通常効果アクションの解決後、そのアクションが新たな誘発を発生させたかどうかを判定します。  
    誘発が発生している場合は、後続の処理でアクションバッファへの追加が行われます。

**[6-10-9] 誘発したアクションをアクションバッファに追加**  
    新たに誘発されたアクションが存在する場合、該当アクションをアクションバッファに追加します。  
    これにより、誘発処理の再実行が可能となります。



まとめ
==============================

コアルールについて説明しました。
すでにあるターン制のゲームからアクションを洗い出し、能力を整理することで割込処理を可能としゲームの新しい遊び方が見つけられます。
また、新しく作成するゲームに関してもコアルールを意識して作成することで、ルール追加がしやすいゲームが考えやすいと思います。
