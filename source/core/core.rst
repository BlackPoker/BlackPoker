.. _core.rst:

==============================
コアルール
==============================

トランプのみでトレーディングカードゲームのように遊ぶためには、
一般的なトレーディングカードゲームを抽象化し、トランプのみで遊べるように再構築しました。

コアルールは、割込みが可能なターン制ゲームの開始から勝敗が決まるまでを定義します。(:numref:`abstract-core-rule`)

BlackPokerはコアルールを実装しているため、ルールを変更する場合は、コアルールに従う必要があります。

このルールは、割込みが可能なターン制ゲームのモデルとして構築されており、他のゲームへの応用も可能です。

.. _abstract-core-rule:
.. uml:: abstract-core-rule.puml
    :caption: コアルールのイメージ
    :scale: 50%

基礎概念
==============================

割込み可能なターン制ゲームでは、現実のゲーム盤面に影響を与える前に、
どの行動を先に行うかを決める仮想的な場所があります。

割込み可能なターン制ゲームは、見方を変えると“許可制のゲーム”とも表現できます。

つまり、プレイヤーは相手に許可を得て、自分の行動を実行できるかどうか確認しながら進める形式のゲームです。

いくつかの基礎概念を紹介します。
その後、それらを組み合わせたイメージを説明します。

.. index::
    single: ターン

------------------------------
ターン
------------------------------
このルールでは、プレイヤーはターンを“持つ”ことができます。
ターンを持っているプレイヤーは先に行動できます。
ターンを持っているプレイヤーをターンプレイヤーといいます。

.. index::
    single: アクション(コア)

------------------------------
アクション
------------------------------
アクションとは、プレイヤーの行動を示す定義です。
ターン制のゲームでは、プレイヤーは様々な行動を行います。
チェスであればコマを進めたり、ババ抜きであれば隣の人からカードを引くなどがあります。
それらをアクションと定義します。

.. index::
    single: チャンス

------------------------------
チャンス
------------------------------
アクションを起こすことができる機会をチャンスといいます。
チャンスを持っている間は何度でもアクションを起こすことができます。


.. index::
    single: ステージ

------------------------------
ステージ
------------------------------
アクションの解決順を整理するために使う領域です。
後入れ先出し方式で、最後に積まれたアクションから順に解決されます。
正確には、ステージにはアクションではなく、後述するリクエストが蓄積されます。

.. index::
    single: リクエスト

------------------------------
リクエスト
------------------------------
アクションを実行すると、ゲームシステム（コアフロー）に対して
どのようなアクションを実行するかを要求します。
この要求をリクエストと呼びます。

リクエストの種類によっては、ステージに蓄積されず、すぐに実行(解決)されるものもあります。

.. index::
    single: コンポーネント

.. _component:

------------------------------
コンポーネント
------------------------------
コンポーネントとは、ゲーム盤面に配置されるモンスターや駒の定義を指します。
例えば、将棋の「歩」は駒としては複数存在しますが、「歩」の定義は1つです。
この定義をコンポーネントといいます。

.. index::
    single: コンポーネントインスタンス

------------------------------
コンポーネントインスタンス
------------------------------
コンポーネントの定義からインスタンス化されたものをコンポーネントインスタンスといいます。
例えば、将棋の「歩」はコンポーネントとして定義されていますが、
実際の盤面に配置される「歩」は、コンポーネント定義という設計図から作られたコンポーネントインスタンスとなります。


------------------------------
コアフロー(ルールシステム)
------------------------------
リクエストはコアフロー(ルールシステム)によって整理され、処理されます。
リクエストを即時解決するものと、ステージに蓄積されるものに分類され、順番に処理されます。

ゲームによって具体的に行う内容は異なりますが、処理する順番の制御順はコアフローが担います。

コアフローはゲームの開始から勝敗が決まるまで動作し続けます。


詳細
==============================

基礎概念を図で表すと次のようになります。(:numref:`abstract-core-image`)

.. _abstract-core-image:
.. figure:: images/abstract.*

    割込み可能なターン制ゲーム

仮想的な場所でリクエストを整理し、現実のゲーム盤面に承認された順で変更を反映します。

リクエストを整理することで割込みを実現しています。どのようにリクエストを処理するかは、コアフローに従います。

さらに、アクションとリクエスト、コンポーネントとコンポーネントインスタンスの関係は次のようになります。(:numref:`action-request_image`)

.. _action-request_image:
.. uml:: action-request.puml
    :caption: リクエストとコンポーネントインスタンスの関係
    :scale: 50%

ゲーム盤面には複数のコンポーネントインスタンスが生成されます。

リクエストが解決されるたびに、コンポーネントインスタンスが生成されたり、既存のコンポーネントインスタンスの状態が変化したりします。

ここからは、アクションとコンポーネントの各項目について説明します。


------------------------------
アクションの定義項目
------------------------------

アクションを定義する際には、次の項目を設定する必要があります。
その他の項目は、具体的なアクションに応じて追加してください。

 * トリガー
 * 起動条件
 * 誘発条件
 * 効果（通常効果・即時効果）
 * タイミング

.. index::
    single: トリガー

トリガー
------------------------------

アクションは、大きく分けて次の2種類に分類されます。

**直接**  
    プレイヤーがコストを支払うなどの手続きを経て実行するアクション。

**誘発**  
    条件が満たされた場合、自動で発動するアクション。

トリガー項目には「直接」または「誘発」のいずれかが設定されます。

.. index::
    single: き|起動条件(コア)

起動条件
------------------------------

アクションを起こすための条件を示します。

トリガーが「直接」の場合、起動条件が定義されます。  
コストの支払いや対象の指定など、様々な条件がアクションごとに設定されます。

BlackPokerでは、コストの支払いや対象の指定の記述が冗長にならないよう、省略されることが多いです。

.. index::
    single: ゆ|誘発条件(コア)

誘発条件
------------------------------

アクションが誘発される条件を示します。  
条件が満たされると、アクションからリクエストが生成され、コアフローに渡されます。

トリガーが「誘発」の場合、この項目が定義されます。

例：  
- ダメージを受けたとき  
- カードが墓地に移動したとき  

これらの状況で誘発するアクションが設定されることがあります。

.. index::
    double: つ|通常効果(コア);そ|即時効果(コア)

効果
------------------------------

効果とは、アクションが解決された際に実行される処理を指します。  
効果には **通常効果** と **即時効果** があります。

これらの違いは、図 (:numref:`coreflow-2`) に示される処理の分岐条件に関係しています。

.. index::
    single: タイミング(コア)

.. _timing:

タイミング
------------------------------

タイミングとは、アクションを実行できるタイミングを示します。  
タイミングには次の2種類があります。

.. index::
    single: メイン

**メイン**  
    ターンプレイヤーかつステージが空のときに起こせるアクション。  
    実行条件：  
    - チャンスを持っている  
    - 自分のターンである  
    - ステージが空である  

.. index::
    single: クイック

**クイック**  
    いつでも起こすことができ、アクションをステージに積み重ねることが可能。  
    実行条件：  
    - チャンスを持っている  

.. note:: エンドアクションの定義

    最低1つはターンを別のプレイヤーに渡すアクションを定義してください。  
    これがないと、ターンが進行せずゲームが停止する可能性があります。

.. note:: アクションのコントローラー

    アクションを実行したプレイヤーを **アクションのコントローラー** と呼びます。  
    効果の解釈は、このコントローラーの視点で行われます。

------------------------------
リクエストの定義項目
------------------------------

**アクション定義**  
    リクエストが解決された際に実行されるアクションの内容。

**コントローラー**  
    アクションを実行したプレイヤーがリクエストのコントローラーとなります。

------------------------------
コンポーネントの定義項目
------------------------------

コンポーネントには、次の項目が定義されます。  
必要に応じて、ゲームに合わせた追加設定をしてください。

**能力**  
    能力の詳細については、後述のセクションを参照してください。(:numref:`ability`)

------------------------------------------------------------
コンポーネントインスタンスの定義項目
------------------------------------------------------------

コンポーネントインスタンスには、次の項目が設定されます。  
必要に応じて、ゲームに合わせた追加設定をしてください。

**コンポーネント定義**  
    どのコンポーネント定義から生成されたのかを保持します。

.. index::
    single: オーナー

**オーナー**  
    コンポーネントインスタンスの所有者。  
    一般的なトランプゲームでは無視されることが多いですが、TCGのようにデッキを個人所有するゲームでは必要な情報です。

.. index::
    single: コントローラー

**コントローラー**  
    現在、そのコンポーネントインスタンスを操作しているプレイヤー。  
    通常はオーナーとコントローラーは同じですが、コントロールを奪うアクションがある場合、異なることがあります。

.. note:: コンポーネントインスタンスとリクエストのコントローラー

    コントローラーは制御している人という意味になるため、コンポーネントインスタンスとリクエストのコントローラーは制御する対象が異なります。
    コンポーネントインスタンスとリクエストの属性を次の図に示します。(:numref:`controller_attr`)

.. _controller_attr:
.. uml:: 
    :caption: コントローラー属性
    :scale: 50%

    left to right direction

    hide methods
    hide circle

    class コンポーネント<<定義>> {
        能力
    }


    class コンポーネントインスタンス<<生成されたもの>> {
        コンポーネント定義
        オーナー
        コントローラー
    }

    class アクション<<定義>> {
        トリガー
        起動条件
        誘発条件
        効果（通常効果・即時効果）
        タイミング
    }

    class リクエスト<<生成されたもの>> {
        アクション定義
        コントローラー
    }

    アクション --> リクエスト : 生成 
    コンポーネント --> コンポーネントインスタンス : 生成 

.. index::
    single: の|能力(コア)

.. _ability:

能力
==============================

アクション、コンポーネントの定義項目を見てきました。
これらとは別の概念である **能力** について説明します。

能力とはアクションの効果とは異なる概念で、アクションを起こす際や効果を解釈する際に参照されます。

能力は解釈される際にコストは支払われず、ステージに置かれません。

能力を持つことができるのは、プレイヤーの他に駒やカードなどのゲームに登場するコンポーネントも含まれます。
(:numref:`ability_image`)

.. _ability_image:
.. uml:: ability.puml
    :caption: 能力のイメージ
    :scale: 50%

.. note::
   7版までは、能力に誘発能力と常在型能力がありました。
   8版からは、誘発型能力とアクションを起こせる能力をアクションの定義側に移動しました。
   能力はそれ以外の常在型能力を示すものになりました。


.. index::
    single: コアフロー

.. _coreflowsec:

コアフロー
==============================

今まで説明してきた概念を用いて **コアフローの具体的な処理** を説明します。  
この図は **ゲームの開始から勝敗が決まるまでの流れ(コアフロー)** を示しています。(:numref:`coreflow-2`)

BlackPokerはこのコアフローに則りリクエストが処理されます。

アナログゲーム用に作成したコアフローであるため、なるべく記憶する容量を減らすように設計しています。
デジタルゲームに応用する場合は、細部をゲームに合わせて変更してください。

.. _coreflow-2:

.. uml:: coreflow.puml
    :caption: コアフロー
    :scale: 50%

.. _core_gamestart:

**[1] ゲーム開始**
    先攻を決め、ゲームを始める準備を行います。


**[2] ターンプレイヤーにチャンスを移動**
    ターンを持っているプレイヤーにチャンスを移動します。


**[3] アクションを起こすか？**
    チャンスを持っているプレイヤーはアクションを起こすかを判断します。


**[4] パス記録のリセット**
    パスしたプレイヤーの記録をリセットします。


**[5] アクションを起こす**
    アクションを起こしこれからプレイヤーが行うことを宣言します。
    ゲームによってアクションの起こし方は異なります。BlackPokerではアクション名を言い、コストの支払や対象を指定しアクションを起こします。
    一方ババ抜きでは、隣のプレイヤーからカードを引く際に宣言せず暗黙にアクションが起きている場合もあります。


**[6] 誘発チェック**
    ここに至るまでに誘発したアクションがないかチェックします。誘発した場合、効果を解決するかスタックに追加します。詳しいフローは :numref:`trigger-check` を参照してください。


**[7] 即時効果か？**
    起こしたアクションが即時効果か通常効果か判定します。


.. _actresolve:

**[8] リクエストの解決**
    アクションの効果に定義されている内容を実行します。
    その他にコンポーネントを捨て山に移動するなどゲームによって決まった処理があれば行います。
    アクションの解決の中でも効果に定義されている内容を実行することのみを指す場合「効果を発揮する」と言います。

.. _winlose:

**[9] 勝敗判定**
    ゲームの勝敗を判定します。決着した場合ゲームが終了します。判定の方法はゲームにより異なります。


**[10] ステージに追加**
    リクエストをステージに追加します。


**[11] パス記録に登録**
    パスしたプレイヤーを記録します。パス記録がリセットされるため、同じプレイヤー名は2回登録されません。


**[12] 全員がパスしたか？**
    パス記録に全てのプレイヤー名が記録されているか判定します。


**[13] ステージにリクエストが存在するか？**
    ステージにリクエストが存在するか判定します。


**[14] ステージから取出し**
    最後にステージに追加されたリクエストをステージから取出します。


**[15] チャンス移動**
    チャンスを持っているプレイヤーからチャンスを持っていないプレイヤーにチャンスを移動します。
    チャンスを移動するルールはゲームによって異なります。


.. _trigger-check:

------------------------------
誘発チェック
------------------------------

アクションの中には誘発条件を持っているアクションがあります。
誘発条件に該当した場合、アクションからリクエストが誘発されます。

誘発チェックでは、誘発したリクエストを解決またはステージに追加します。
誘発したリクエストのコントローラーは起因となったアクションのオーナーがコントローラーとなります。
誘発チェックは次の図のように行います。(:numref:`trigger-flow`)


.. note:: バッファ

    誘発したリクエストを一時的に溜めておくバッファという領域があります。正式名称はアクションバッファです。

.. _trigger-flow:
.. uml:: triggerflow.puml
    :caption: 誘発チェック
    :scale: 50%



.. _trigger-act-gather:

**[6-1] 誘発したリクエストを分類しバッファに追加**  
    各プレイヤーが誘発させたリクエストを、効果の種類（即時効果または通常効果）および  
    タイミング（メインまたはクイック）に基づいて分類し、一旦バッファに追加します。

**[6-2] バッファは空か？**  
    バッファが空であるかどうかを判定します。
    未処理のリクエストが残っている場合は、以降の処理ループを継続します。

**[6-3] バッファに即時効果はあるか？**  
    バッファ内に即時効果のリクエストが存在するかを判定します。  
    未処理の即時効果をもつリクエストが残っている場合、  
    ターンプレイヤーから順に即時効果の処理グループへ進みます。

**[6-4] 該当プレイヤーに即時効果があるか？**  
    現在処理対象となっているプレイヤーがコントローラーとなっているリクエストがバッファにあるかを確認します。  
    即時効果をもつリクエストが存在するかを判定し、
    存在しない場合は、そのプレイヤーでの処理を終了し、次のプレイヤーへ移行します。

**[6-5] タイミング=メインの即時アクションを処理**  
    該当プレイヤーについて、タイミングが「メイン」の即時効果アクションを実行します。  
    詳細は :numref:`trigger-act-s` をタイミング=メインとして参照してください。

**[6-6] タイミング=クイックの即時アクションを処理**  
    同じプレイヤーについて、タイミングが「クイック」の即時効果アクションを実行します。  
    詳細は :numref:`trigger-act-s` をタイミング=クイックとして参照してください。

**[6-7] 次のプレイヤーへ**  
    現在のプレイヤーでの即時効果アクションの処理が完了した後、  
    ターン順に次のプレイヤーへ処理を移行します。

**[6-8] バッファに通常効果はあるか？**  
    バッファ内に通常効果のリクエストが存在するかを判定します。  
    未処理の通常効果をもつリクエストが残っている場合、  
    通常効果の処理グループへ進みます。

**[6-9] 該当プレイヤーに通常効果があるか？**  
    現在処理対象となっているプレイヤーがコントローラーとなっているリクエストがバッファにあるかを確認します。  
    通常効果をもつリクエストが存在するかを判定し、
    存在しない場合は、そのプレイヤーでの処理を終了し、次のプレイヤーへ移行します。

**[6-10] タイミング=メインの通常アクションを処理**  
    該当プレイヤーについて、タイミングが「メイン」の通常効果アクションを実行します。  
    詳細は :numref:`trigger-act-n` をタイミング=メインとして参照してください。

**[6-11] タイミング=クイックの通常アクションを処理**  
    同じプレイヤーについて、タイミングが「クイック」の通常効果アクションを実行します。  
    詳細は :numref:`trigger-act-n` をタイミング=クイックとして参照してください。

**[6-12] 次のプレイヤーへ**  
    現在のプレイヤーでの通常効果アクションの処理が完了した後、  
    ターン順に次のプレイヤーへ処理を移行します。

.. note::
   各処理グループ内では、必ずターンプレイヤーから始まり、  
   ターンが回る順に全プレイヤーに対して確認およびアクションの処理を実施します。  
   また、ループはバッファに未処理のアクションが存在する限り繰り返されます。


.. _trigger-act-s:

誘発即時効果解決
------------------------------

誘発チェックで誘発した即時効果を処理します。
呼び出し元で指定されたプレイヤーおよびタイミングに基づいて処理します。
誘発チェックは次の図のように行います。(:numref:`trigger-flow_s`)


.. _trigger-flow_s:
.. uml:: triggerflow_s.puml
    :caption: 誘発チェック-即時効果処理
    :scale: 50%


**[6-5-1] バッファから該当の即時効果はあるか？**  
    バッファから、対象プレイヤーおよびタイミングに該当する即時効果のリクエストが存在するかを判定します。  
    存在する場合、以降の処理へ進み、存在しなくなるまでこのループを継続します。

**[6-5-2] バッファから即時効果を取り出す**  
    条件を満たしたリクエストを、バッファから1つ取り出します。
    どのリクエストを取り出すかは対象プレイヤーが決定します。
    取り出されたリクエストは、解決処理の対象となります。

**[6-5-3] 取り出したリクエストを解決する**  
    取り出されたリクエストの即時効果を実行し、解決します。  
    詳しくは :ref:`actresolve` 参照してください。

**[6-5-4] 勝敗判定**  
    勝敗を判定します。
    詳しくは :ref:`winlose` 参照。

**[6-5-5] リクエストが新たな誘発を発生させたか？**  
    即時効果の解決後、それが起因となり新たな誘発を発生させたかどうかを確認します。  
    発生している場合は、その誘発アクションを再度バッファに追加する必要があります。

**[6-5-6] 誘発したリクエストをバッファに追加**  
    新たに誘発されたリクエストが存在する場合、該当アクションをバッファに追加します。  
    これにより、再帰的なアクション処理が可能となり、次のループで該当するリクエストの取り出し処理が実行されます。


.. _trigger-act-n:

通常効果：アクション毎に処理
------------------------------

誘発チェックで誘発した通常効果を処理します。
呼び出し元で指定されたプレイヤーおよびタイミングに基づいて処理します。
誘発チェックは次の図のように行います。(:numref:`trigger-flow_n`)


.. _trigger-flow_n:
.. uml:: triggerflow_n.puml
    :caption: 誘発チェック-通常効果処理
    :scale: 50%


**[6-10-1] バッファから該当の通常効果はあるか？**  
    バッファから、対象プレイヤーおよびタイミングに該当する通常効果のリクエストが存在するかを判定します。  
    存在する場合、以降の処理へ進み、存在しなくなるまでこのループを継続します。

**[6-10-2] バッファから通常効果を取り出す**  
    条件を満たしたリクエストを、バッファから1つ取り出します。
    どのリクエストを取り出すかは対象プレイヤーが決定します。
    取り出されたリクエストは、解決処理の対象となります。

**[6-10-3] 取り出した通常効果のタイミングがメインか判定**  
    取り出された通常効果アクションのタイミングが「メイン」であるかどうかを判定します。  
    「Yes」と判定された場合は、ステージへの追加前に空き状況の確認へ進みます。  
    「No」の場合は、クイックタイミングとして処理を行います。

**[6-10-4] ステージが空か判定**  
    タイミングがメインの場合、そのリクエストをステージに追加できるかどうか、  
    すなわちステージに空きがあるかを判定します。

**[6-10-5] 通常効果をステージに追加**  
    ステージが空いている場合、取り出したリクエストをステージに追加します。  

**[6-10-6] 通常効果を破棄**  
    ステージが埋まっている場合、取り出した通常効果アクションを破棄します。  

**[6-10-7] タイミングがクイックの場合、通常効果アクションをステージに追加**  
    取り出した通常効果アクションのタイミングが「クイック」である場合、  
    ステージの空き状況にかかわらず無条件でリクエストをステージに追加します。

**[6-10-8] リクエストが新たな誘発を発生させたか？**  
    リクエストをステージに追加した後、それが起因となり新たな誘発を発生させたかどうかを確認します。  
    誘発が発生している場合は、後続の処理でアクションバッファへの追加が行われます。

**[6-10-9] 誘発したリクエストをバッファに追加**  
    新たに誘発されたリクエストが存在する場合、該当アクションをバッファに追加します。  
    これにより、誘発処理の再実行が可能となります。



まとめ
==============================

コアルールについて説明しました。
すでにあるターン制のゲームからアクションを洗い出し、能力を整理することで割込処理を可能としゲームの新しい遊び方が見つけられます。
また、新しく作成するゲームに関してもコアルールを意識して作成することで、ルール追加がしやすいゲームが考えやすいと思います。
