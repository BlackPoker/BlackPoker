.. _common.rst:

==============================
共通ルール: 基本
==============================

この章では、BlackPokerのすべての対戦で共通して使用される共通ルールを説明します。
フォーマットやフレームに関係なく、BlackPokerを遊ぶうえでの土台となるルールです。

プレイ人数、カードの種類、場の構成、アクションの処理など、ゲームの進行に必要な共通事項をまとめています。

※ フォーマットやフレームにより細かな違いがある場合は、フォーマットやフレーム側で補足されます。


プレイ人数
==============================
2人です。

用意するもの
==============================

* 1人1セットのトランプが必要です。
* 覚えていない場合、対戦レギュレーションに応じてアクションリストやキャラクターリストなどがあると便利です。


使用できるトランプ
==============================
BlackPokerでは次の条件を満たしたトランプを使うことができます。
一般的なトランプなら満たす条件となっています。

 * スートと数字が分かる
 * スートの♠♡♢♣が判断できる
 * 数字のA-K (1-13) が判断できる
 * スートと数字の組合せが重複していない
 * 裏から表がわからない
 * 縦向き横向きが判断できる
 * Jokerは2枚まで入れられる
 * 54枚無くてもよい

対戦レギュレーションにより使用できるトランプの枚数など異なる場合があるため、
対戦する際に、対戦レギュレーションを確認してください。


トランプの数字
==============================
ゲーム全体を通してトランプの数字は次のような数値として扱います。(:numref:`cardrank`)

.. _cardrank:
.. table:: トランプの数字

    +--------+------------+
    | カード |    数字    |
    +========+============+
    | A      | 1          |
    +--------+------------+
    | 2〜10  | 表記どおり |
    +--------+------------+
    | J      | 11         |
    +--------+------------+
    | Q      | 12         |
    +--------+------------+
    | K      | 13         |
    +--------+------------+
    | Joker  | 0          |
    +--------+------------+


.. index::
    single: り|領域
    single: ゾーン


.. _zone-section:

領域（ゾーン）
==============================

BlackPokerには、「領域(ゾーン)」と呼ぶ、カードを置く場所がいくつかあります。
各領域には配置可能なカード種類（コンポーネント）が定義されています。

.. index::
    single: ユニット条件
    single: ユニットカード
    single: ユニット

ゲーム中に配置されたカードのまとまりを「ユニット」と呼びます。  
ユニットを構成する各カードを「ユニットカード」と呼びます。  
そのユニットがどのコンポーネント定義（コンポーネントスクリプト）に対応するかはスクリプト側の
「ユニット条件」を参照してください。

領域ごとに存在するコンポーネントの一覧です。(:numref:`zone-component`)

.. _zone-component:
.. csv-table:: 領域ごとに存在するコンポーネント一覧
   :widths: 1, 1
   :header-rows: 1
   :file: ./zone-component.csv


※ 表中では「ライフ」「墓地」「手札」などと記載しますが、「ライフ領域」「墓地領域」「手札領域」と呼んでも構いません。

各コンポーネントの詳細な定義や項目については、:numref:`common-component.rst` で詳しく説明します。


ここまでで「どの領域に」「どんなコンポーネントが置かれるか」を整理しました。  
次節では、実際のプレイ中にそれらがどのように配置されるかを図示して解説します。



カードの配置
==============================
カードの配置には次のような場所があります。(:numref:`field`)

※これらの領域は、フレームによって使用する領域が異なります。

.. _field:
.. figure:: ../frame/images/extra.*

    プレイ中のカードの配置

各領域で定義されたコンポーネントは、この配置図の対応する位置に置かれます。  
以下では主要な領域について説明します。

.. index::  
    single: ライフ

ライフ  
    山札。ゲームを始める時に自分のデッキを裏向きで置きます。  
    ダメージを受けるとライフの一番上から墓地にカードを移します。

.. index::  
    single: ぼ|墓地

墓地  
    捨て札置き場。ダメージを受けた時などに表向きでカードを重ねて置きます。

.. index::  
    single: ば|場

場  
    兵士や防壁などのキャラクターを置きます。

.. index::  
    single: て|手札

手札  
    ライフから引いたカードを持っておく場所です。相手から見えないようにしましょう。

.. index::  
    single: フォグ

フォグ  
    このターンのみ影響を与えるフォグを置きます。

.. index::  
    single: パック

パック  
    一部のフレームで使用される領域です。デッキから一部のカードを取り分けて伏せて置きます。  
    アクション（例：パック開封）によって順に使用されることがあります。

.. index::  
    single: レアカード

レアカード  
    特別な1枚を配置するための領域です。主にゲーム開始時に選ばれ、フレームによって使い方が異なります。  
    特定のアクション（例：レアドロー、レア召喚）と組み合わせて使われます。

.. index::  
    single: き|切札

切札  
    切札領域に配置するコンポーネントです。各カードに割り当てられた能力を活用でき、使用可能なフレームは個別に定義されます。



------------------------------
デッキとライフ
------------------------------
対戦レギュレーションなどでデッキという表現が出てきます。

.. index::
    single: デッキ

デッキ
    ゲーム開始前にゲームで使用するカードの束（カード構成）。
    フレームに応じて使用できるデッキの条件が異なります。

ゲームの始め方を経てデッキはライフとなります。詳細は :numref:`common_gamestart` で説明します。





勝利条件
==============================
プレイヤーは順に対戦相手に対し攻撃を行い、ダメージを与え先に相手のライフを0枚にした方が勝ちです。ダメージは1点につき、ライフが1枚減ります。

.. index::
    single: ダメージ

ダメージ
==============================
プレイヤーがダメージを受けた場合、ライフの一番上から受けた点数分墓地にカードを表向きで移動します。移動する際は、カードの表を対戦相手に見せる必要はありません。



.. _common_gamestart:

ゲームの始め方
==============================

BlackPokerでは、選択した「フレーム」に応じてゲームの開始手順が異なります。  
各フレームでは、「デッキ構築」や「初期配置」、「防壁・兵士のプリセット状態」などが個別に定義されています。  

そのため、ゲームを始める際は、まずフレームごとの「ゲームの始め方」に従って準備を行ってください。

各フレームに共通する手順を次に示します。ただし、エクストラではプリセット配置の手順が異なります。

.. _common_gamestart_preset:

------------------------------
共通手順：プリセット配置
------------------------------

#. ライフの一番上のカードを表向きにして「防壁」として場に出す。
#. 続けてライフの次のカードを表向きにして「兵士」として場に出す。

この手順は「プリセット」と呼ばれています。

.. _common_gamestart_first:

------------------------------
共通手順：先攻決定
------------------------------

#. 両者ライフの一番上のカードを表にする。
#. 数字の大きいプレイヤーが先攻（数値は :numref:`cardrank` を参照）。
#. 同じ数値の場合、さらにライフの一番上をめくって同様に比較。
#. 表にしたカードはすべて墓地に移す。

.. _common_gamestart_start:

------------------------------
共通手順：ゲーム開始
------------------------------

#. 先攻プレイヤーはライフから1枚引いて手札に加える。
#. 先攻プレイヤーがターンとチャンスを持ち、ゲームが開始される。


.. note:: ゲームの始め方の補足

    - フレームによっては、上記の「プリセット」や「先攻決定」「ゲーム開始」に入る前に、特別な手順（例：ストラテジー選択や切札設定など）があります。
    - 必ず対戦前に、使用するフレームの内容を確認してください。




基礎概念
==============================

ここまでで、BlackPokerを遊ぶための **土台** （人数・用具・トランプの条件と数字の扱い）、  
そして **どこに何を置くか** という場の構成（:ref:`zone-section`）と **ゲーム開始手順** を確認しました。

この節では、その土台の上でゲームを動かすための **基本概念** を「次に読むべき章」へつながる形で紹介します。


----------------------------------------
BlackPokerとは
----------------------------------------

BlackPoker は、 **標準的なトランプだけで遊べる、割込み可能なターン制のTCG風ゲーム** です。  
プレイヤーは **すること（アクション）** を宣言し、それをルールシステムが盤面に反映していきます。これにより、 **盤面に存在するもの（コンポーネント／ユニット）** が増えたり移動などしてゲームが進んできます。

重要な2つの概念は次のとおりです。

- **アクション** 
    アクションとは、プレイヤーが起こす行為(すること)をプレイヤーが要求して盤面に反映するまでを扱う概念です。
    プレイヤーは数多くあるアクションの定義から、ルールシステムに対して実行したいことを要求します。ルールシステムはその要求を実行して盤面に反映します。
    アクションの定義を **アクションスクリプト** と呼び、処理される要求することを **リクエスト** と呼びます。
    詳しくは、:ref:`common-action.rst` で説明します。
- **コンポーネント**
    コンポーネントとは、ゲーム盤面に配置されるキャラクターや切札などを扱う概念です。
    例えば、キャラクターの「一般兵」は場に複数体存在しますが、「一般兵」の定義は1つです。 
    定義のことを **コンポーネントスクリプト** 、定義に合致する実態を **ユニット** と呼びます。
    詳しくは、:ref:`common-component.rst` で説明します。

要するに、 **アクションが盤面（コンポーネント／ユニット）を変え、盤面の状態を見て次のアクションを起こす** ――この往復がゲームの心臓部です。  
この往復の全体的なイメージは :numref:`abstract-overview` を参照してください。登場する用語はこの後で説明しますので、ここでは全体像を大まかに把握してください。

.. _abstract-overview:

.. figure:: images/abstract_editable_fixed.drawio.*
   :alt: 基礎概念の全体像（アクション／リクエストとコンポーネント／ユニット）
   :height: 400px

   基礎概念の全体像



補足: 図の読み方
------------------------------------

:numref:`abstract-overview` の読み方を説明します。

詳しい説明は次の章以降で行いますが、ここでは全体像を把握するためにざっくりとした流れを説明します。

図は大きく2つに分かれています。

- **上半分 仮想:アクション** ：アクションとリクエストの流れ
- **下半分 現実:コンポーネント** ：コンポーネントとユニットの関係

この点を踏まえて、図中の数字を順に見ていきましょう。

- [1] アクションを起こす
    アクションを起こすと **リクエスト** が **ステージ** に積まれます。リクエストは後に積まれたものから順に処理されます。
- [2] 承認後リクエストを実行(解決)
    ステージ上にある各リクエストは、1つずつ盤面に反映されます。これを **解決** と呼びます。
- [3] ユニットを出すなど盤面の状態を変更
    解決結果が盤面に反映され、 **ユニット** の状態や有無が更新されます。各ユニットはいずれかのコンポーネントと紐づいています。


--------------------------
この後の読み方
--------------------------

基礎概念を大まかに理解したうえで、次の章を読むことをお勧めします。

- :ref:`common-component.rst`
  コンポーネントについて具体的にどのような種類があるか、どのようにユニットとコンポーネントを対応させるかを説明します。
  
- :ref:`common-action.rst`
  アクションの **起こし方（リクエスト）／割込み／解決** の処理系を扱います。  
  **コスト・タイミング・対象** の見方、解決時の不発・実行可能部分の扱いなど、アクション全般について説明します。


------------------------------
スクリプト
------------------------------

アクションやコンポーネントの定義は **スクリプト** と呼ばれます。

次のように分類されます。

- **アクションスクリプト** ：アクションの定義
- **コンポーネントスクリプト** ：コンポーネントの定義

アクション、コンポーネントは広い概念です。
場合によっては、アクションスクリプト、コンポーネントスクリプトを指しているが、単に「アクション」や「コンポーネント」と呼ぶことがあります。

次の章以降でもスクリプトという言葉が出てきますが、基本的にはアクションスクリプト、コンポーネントスクリプトのいずれかを指しています。
