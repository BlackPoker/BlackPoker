.. _common.rst:

==============================
共通ルール
==============================

BlackPokerには様々な対戦方法があります。
個別の違いは対戦レギュレーションで定義されています。

この章では、BlackPokerの共通的なルールを説明します。

.. カードの配置などコアルールで定義されていない内容を定義します。

プレイ人数
==============================
フォーマット、対戦レギュレーションに定義されていない場合、2人です。
プレイする際に確認してください。


用意するもの
==============================
 * 1人1セットのトランプが必要です。
 * 覚えていない場合、フォーマットに応じてアクションリスト、エクストラリストがあると便利です。


使用できるトランプ
==============================
BlackPokerでは次の条件を満たしたトランプを使うことができます。
一般的なトランプなら満たす条件となっています。

 * スートと数字が分かる
 * スートの♠♡♢♣が判断できる
 * 数字のA-K（1-13）が判断できる
 * スートと数字の組合せが重複していない
 * 裏から表がわからない
 * 縦向き横向きが判断できる
 * Jokerは2枚まで入れられる
 * 54枚無くてもよい

 対戦レギュレーションにより使用できるトランプの枚数など異なる場合があるため、
 対戦する際に、対戦レギュレーションを確認してください。


トランプの数字
==============================
ゲーム全体を通してトランプの数字は次のような数値として扱います。(:numref:`cardrank`)

.. _cardrank:
.. table:: トランプの数字

    +--------+------------+
    | カード |    数字    |
    +========+============+
    | A      | 1          |
    +--------+------------+
    | 2〜10  | 表記どおり |
    +--------+------------+
    | J      | 11         |
    +--------+------------+
    | Q      | 12         |
    +--------+------------+
    | K      | 13         |
    +--------+------------+
    | Joker  | 0          |
    +--------+------------+


カードの配置
==============================
カードの配置には次のような場所があります。(:numref:`field`)


.. _field:
.. figure:: images/field.*

    プレイ中のカードの配置

.. index::
    single: ライフ

ライフ
 山札。ゲームを始める時に自分のトランプを裏向きに置く場所です。
 ダメージを受けるとライフの一番上から墓地にカードを移します。

.. index::
    single: ぼ|墓地

墓地
 捨て札置き場。ダメージを受けた時などに表向きでカードを重ねて置きます。

.. index::
    single: ば|場

場
 兵士や防壁などのキャラクターを置きます。

.. index::
    single: て|手札

手札
 ライフから引いたカードを持っておく場所です。相手から見えないようにしましょう。

.. index::
    single: き|切札(場所)

フォグ
 このターンのみ影響を与えるカードを置きます。


------------------------------
デッキとライフ
------------------------------
対戦レギュレーションなどでデッキという表現が出てきます。

.. index::
    single: デッキ

デッキ
    ゲーム開始前にゲームで使用するカードの束（カード構成）

ゲームの始め方を経てデッキはライフとなります。詳細は :numref:`common_gamestart` で説明します。



勝利条件
==============================
プレイヤーは順に対戦相手に対し攻撃を行い、ダメージを与え先に相手のライフを0枚にした方が勝ちです。ダメージは1点につき、ライフが1枚減ります。

.. index::
    single: ダメージ

ダメージ
==============================
プレイヤーがダメージを受けた場合、ライフの一番上から受けた点数分墓地にカードを表向きで移動します。移動する際は、カードの表を対戦相手に見せる必要はありません。

.. index::
    single: キャラクター

キャラクター
==============================

キャラクターとは、場に存在する兵士や防壁のことを指します。
コアルールのコンポーネントにあたります。

キャラクターは1枚のカードで1体を表すこともあれば、
複数枚で1体を表すこともあります。(:numref:`character`)

.. _character:
.. figure:: images/character.*

    キャラクターの例

------------------------------
キャラクターのもつ項目
------------------------------
キャラクターのもつ項目について説明します。

.. 凡例のキャラクター「一般兵」を見てみましょう。(:numref:`character-sample`)

.. .. _character-sample:
.. .. figure:: images/character-sample.*

    一般兵

.. index::
    single: キャラクター名

キャラクター名
 キャラクターの名称を示します。


.. index::
    single: タイプ(キャラクター)

タイプ
 キャラクターのタイプを示します。タイプは兵士と防壁の2種類が存在します。


.. index::
    single: キーカード

キーカード
 キャラクターを示すカードが記載されています。複数のカードで1体のキャラクターを示す場合もあります。


.. index::
    single: ラベル

ラベル
 キャラクターもつ属性を示します。「速攻」や「アタッカー」など様々なラベルがあります。


.. index::
    single: サイズ

サイズ
 兵士の持つ大きさを示します。


.. index::
    single: の|能力(キャラクター)

能力
 キャラクターが持っている能力を記載しています。

------------------------------
キャラクターのサイズ
------------------------------
トランプの数字は、キャラクターの強さを示します。
基本はカードに記載された数字に準じますが、魔法などのアクションを使うことで
加算や減算されることがあります。


------------------------------
キャラクターの注意点
------------------------------

複数枚で1体となるキャラクターが防壁になったら？
------------------------------------------------------------

アクションの効果で兵士を防壁にすることがあります。
防壁は1枚で1体のキャラクターであるため、
複数枚からなるキャラクターが防壁となった場合、
複数体の防壁となります。

なお、複数枚からなるキャラクターが
墓地や手札に移った場合、
1体のキャラクターとして
扱うため複数枚合わせて移します。
チャージ状態、ドライブ状態となった場合も同様に1体のキャラクター
として扱います。

.. index::
    single: チャージ
    single: ドライブ

------------------------------
チャージとドライブ
------------------------------
キャラクターには、チャージ状態とドライブ状態が存在します。
チャージ状態は未使用状態を示し、ドライブ状態は使用済み状態を示しています。
また、キャラクターを横向きにすることを「ドライブ」、縦向きにすることを「チャージ」と言います。(:numref:`chargedrive`)

.. _chargedrive:

.. figure:: images/charge&drive.*

    チャージとドライブ

.. _common_gamestart:

ゲームの始め方
==============================

デッキをよく切り、次の手順でゲームを始めます。


.. _common_gamestart_field:

------------------------------
配置準備
------------------------------

 #. デッキをよく切る。
 #. デッキより7枚引き手札にする。
 #. デッキをライフの場所に置き、ライフとする。


.. _common_gamestart_first:

------------------------------
先攻決定
------------------------------

 #. 両者ライフの一番上を表にする。
 #. 大きい数字のプレイヤーが先攻。数字については、 :numref:`cardrank` 参照。
 #. 数字が同じ場合、さらにライフの一番上を表にし同様のルールで比べる。
 #. 表にしたカードを墓地へ移す。


.. _common_gamestart_start:

------------------------------
ゲーム開始
------------------------------

 #. 先攻プレイヤーはライフより1枚引き手札に加える。
 #. 先攻プレイヤーがターンとチャンスをもちゲームを開始する。

.. この行動が
.. :numref:`coreflowsec` の
.. :ref:`core_gamestart` に該当します。
.. この後は
.. :numref:`coreflowsec` 
.. に準じアクションを起こしてゲームを進行します。

ゲームの始め方は対戦レギュレーションによって異なることがあります。
対戦前に確認してください。

.. ゲーム内で起こせるアクションは対戦レギュレーション、フォーマットより異なります。
.. 対戦前に確認してください。

.. index::
    single: アクション

アクション
==============================

BlackPokerは割込み可能なターン制ゲームです。

例えば次の状況をイメージしてください。

 - **Aくん**：「この兵士アップします。」  
 - **Bさん**：「その前にこの兵士ダウンします。」  
 - **Aくん**：「じゃあそのダウンをカウンターします。」  
 - **Bさん**：「それをさらにカウンターします。」  
 - **Aくん**：「・・・（泣）」  
 - **Bさん**：「（どやっ！）」  

このやり取りの中で「アップします」や「ダウンします」などの1行1行がアクションになります。

割込み可能なターン制ゲームは、見方を変えると“許可制のゲーム”とも表現できます。

このアクションを実行したいとルールシステムに要求(リクエスト)し、相手に許可を得てリクエストが実行されます。もちろん相手はリクエストに対して割り込んでリクエストすることもできます。

アクションには、プレイヤーのすべての行動を定義しており、従来のTCGでいう「魔法」や「ターン制御」が含まれています。

参考: :numref:`core.rst`

------------------------------
アクションが持つ項目
------------------------------
アクションが持つ項目について説明します。

.. 凡例の「サンプル」アクションを見てみましょう。(:numref:`action-sample`)

.. .. _action-sample:
.. .. figure:: images/action-sample.*

..     サンプルアクション

.. index::
    single: アクション名

アクション名
    アクションの名称を示します。


.. index::
    single: タイプ(アクション)

タイプ
    アクションの種類を表します。アクション名の後に括弧書きで記載します。


.. index::
    single: トリガー

トリガー
    アクションには自分で起こせるアクションと誘発するアクションがあります。
    トリガー項目では「直接」か「誘発」が設定されています。

    参考: :numref:`trigger_core`


.. index::
    single: スピード

スピード
    アクションはすぐに効果が解決されるものとそうでないものがあります。
    スピード項目では「即時」か「通常」が設定されています。

    参考: :numref:`speed_core`


.. index::
    single: タイミング

タイミング
    アクションは起こせるタイミングが2種類あります。「メイン」は自分のターンかつステージが空のときに起こせます。
    「クイック」はいつでも起こすことができます。

    参考: :numref:`timing`



.. index::
    single: キーカード(アクション)

キーカード
    アクションの核となるカードを示します。
    キーカードは★を使って表記します。
    凡例の場合、手札からコストとは別に♡A〜10に該当するカードを1枚
    キーカードとして使用します。


.. index::
    single: コスト

コスト
    アクションを起こすのに必要な対価です。
    コストは＄を使って表記し、コストの支払いはアクションを起こすプレイヤーが行います。コストの種類は :numref:`cost` で説明します。


.. index::
    single: た|対象

対象
    効果の対象を示します。


.. index::
    single: と|特記事項

特記事項
    特記事項は※を使って表記し、その他の項目では書き表せない条件を示します。


.. index::
    double: つ|通常効果;そ|即時効果

効果
 効果の内容を示します。


.. note:: トリガー,スピード,タイミングの表記

    トリガー,スピード,タイミングは@を使って次のように表記されます。

    @[トリガー]-[スピード]-[タイミング]

    例えば次のようになります。

    @誘発-即時-クイック


記載されていないアクションの項目
------------------------------------------------------------

アクションによっては記載されていない項目もあります。
記載されていない項目は無視して構いません。
たとえばコスト項目がなければコストを支払う必要はありません。


.. _cost:

------------------------------
コストの種類
------------------------------

アクションによって支払うコストが異なります。
コストには次の種類があり、それぞれ支払い方が異なります。(:numref:`table-cost`)

.. _table-cost:
.. table:: コストの種類

    +---------------+-----------------------------+
    |  表記(名称)   |            対価             |
    +===============+=============================+
    | B (Bulwark)   | 防壁をドライブする          |
    +---------------+-----------------------------+
    | L (Life)      | 1点ダメージを受ける         |
    +---------------+-----------------------------+
    | D (Discard)   | 手札を1枚捨てる             |
    +---------------+-----------------------------+
    | S (Sacrifice) | キャラクター1体を墓地に移す |
    +---------------+-----------------------------+


たとえばコストが **「$BL」** の場合、自分の場にいるチャージ状態の防壁を1体ドライブし、1点ダメージを受けることでコストが支払われたことになります。

------------------------------------------------------------
アクションの起こし方(リクエスト)
------------------------------------------------------------

BlackPokerは実行したいアクションを要求(リクエスト)し、進める形式のゲームです。

アクションを要求することを「アクションを起こす」または「アクションをリクエストする」といいます。

次の手順でアクションをリクエストすることができます。

 #. 起こすアクションを対戦相手に伝える。
 #. アクションに応じたコストを支払う。
 #. 必要なら手札からキーカードを出す。
 #. 対象の指定が必要な場合、対象を指定する。

.. 「サンプル」アクションを起こす例を見てみましょう。(:numref:`action-sample2`)

.. .. _action-sample2:
.. .. figure:: images/action-sample2.*

    .. アクションを起こす例

アクションを起こすときの注意点
------------------------------

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
対象を指定しないでアクションを起こせるか？
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

「対象」項目がある場合、記載された条件を満たした対象を指定できなければ、
そのアクションを起こすことはできません。

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
アクションを対象とするアクションは自身を対象にできるか？
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

アクションは、自分自身を対象とすることはできません。
そのため、「カウンター」アクションのようにアクションを対象とするアクションは
自身を対象とすることはできません。

------------------------------
アクションの解決
------------------------------

リクエストされたアクションを実行済みにすることを「アクションを解決する」といいます。

実際にアクションが解決される流れを見ていきましょう。

**用語**

登場する用語を説明します。

**チャンス**
    アクションをリクエストする(ステージに積む)権利（他TCGの優先権）

**ターン**
    手番を示す印

**ステージ**
    アクションが蓄積される場所（他TCGのスタック）


1. プレイヤーAがアクションを積む

.. _action-request1-image:
.. figure:: images/action-request1.*

     アクションの解決1

2. プレイヤーBがアクションを積む

.. _action-request2-image:
.. figure:: images/action-request2.*

     アクションの解決2

3. アクションを実行（解決）

.. _action-request3-image:
.. figure:: images/action-request3.*

     アクションの解決3


大まかな流れは図の通りとなります。

更に厳密な処理は :numref:`coreflowsec` を参照してください。

.. :ref:`actresolve` に行うことを順に示します。

次に細かな部分を説明します。

補足ですが次に説明する部分は、 :numref:`coreflowsec` の :ref:`actresolve` で順に行われます。

対象条件を確認
------------------------------------------------------------
対象を指定するアクションが効果を発揮しようとした時に次の条件に該当する場合、効果を発揮する対象を失うため効果が発揮されず
アクションが解決されます。

 - 対象が存在していない場合
 - 対象が分裂した場合

たとえば兵士に対して「アップ」アクションを起こし、対応して「ダウン」
アクションを起こされました。
「ダウン」の方が先に解決されるため、「アップ」を解決する時には
兵士が墓地に移っていたとします。その場合、「アップ」アクションは効果を発揮せず解決されます。

「リバース」による対象分裂も同様です。
たとえば装備兵に対して「ツイスト」アクションを起こし、対応して「リバース」アクションを起こしたとします。
この場合、「リバース」が先に解決され、装備兵が分裂します。
その場合、「ツイスト」は対象を失いアクションの効果を発揮せず解決されます。


効果を発揮
------------------------------------------------------------
リクエストが解決する際に、アクションの効果に定義されている内容を実行します。
効果の中に実行不可能な部分がある場合、可能な部分のみ実行します。

たとえば、ライフの枚数が残1枚の時に5点のダメージを受けたとします。
ライフは1枚しかないので5点ダメージを受けることはできませんが、
1点までなら受けることが可能なため、
この場合1点のダメージを受けることになります。


解決は墓地移動までを含む
------------------------------------------------------------
「リクエストを解決する」という文言には、キーカードを墓地に移動し終えるまでが含まれています。

「リクエストを解決する」をまとめると次のようになります。

#. ステージの一番上にあるリクエストを特定する
#. リクエストの対象が正しいか確認する
#. 正しい場合、リクエストされたアクションの効果を可能な限り実行する
#. リクエストをステージから取り除く
#. キーカードがある場合、墓地に移す


ステージ上で効果を発揮
------------------------------------------------------------
アクションの効果を実行する際にリクエストはまだステージ上にあります。

効果の実行が完了した後、ステージ上から取り除かれます。


.. _keycard-gy:

キーカードを墓地に移す
------------------------------
効果を発揮した後、そのアクションをステージから取り除き、キーカードを墓地に移します。
ただし効果によってキーカードを場に出した場合や手札に戻した場合、
そのカードを移す先が明確になっているため、墓地には移しません。

------------------------------
勝敗判定
------------------------------

.. :ref:`winlose` で確認する内容は次になります。

アクションを解決するたびに勝敗判定が行われます。

勝敗はライフを確認し0枚の場合そのプレイヤーは敗北となります。

勝敗判定はターンプレイヤーから行われます。
もし、両プレイヤーのライフが0枚の場合、ターンプレイヤーの負けとなります。

補足ですがこの勝敗判定は、 :numref:`coreflowsec` の :ref:`winlose` で確認されます。


------------------------------
誘発チェック
------------------------------

アクションが解決された際に、
アクションの誘発条件に該当するとアクションが誘発されることがあります。

誘発とは、自動的にアクションがリクエストされることです。

BlackPokerの基本的なルールでは、次の2つの誘発パターンがほとんどです。

それ以外の場合は、:numref:`coreflowsec` を参照してください。


.. 誘発されるリクエストのコントローラー
.. ⇢コントローラーについてそもそも言及してなかった。。。


パターン1: ターン制御
------------------------------

ターン制御系のアクションでは対象のアクションが解決すると次のアクションが誘発します。

例えば次のようなターン制御があります。

1. アタック
2. ブロック
3. ダメージ判定

アタックアクションが解決すると、ブロックアクションが誘発します。

ブロックアクションが解決するとダメージ判定アクションが誘発します。

BlackPokerでは一般的なTCGではフェイズとして扱われるものも全てアクションとして定義されています。

同様に、エンド、チャージ、ドローアクションも定義されています。


パターン2: 世代交代
------------------------------

BlackPokerでは、Joker,A,J,Q,Kのカードが場から墓地に移った場合、世代交代というアクションが誘発します。

効果の内容はアクションリストを参照してください。

:numref:`act-nextGeneration`


.. ------------------------------
.. その他補足事項
.. ------------------------------



.. 1ターンに1回制限
.. ------------------------------
.. 特記事項に「プレイヤーは1ターンに1回しかこのアクションを起こすことができない。」と記載されているアクションは、
.. ターンを持っているプレイヤーが変わるまでの間に1回しか起こす
.. ことができません。

.. ターンを持っているプレイヤーが変わればまた起こすことができます。


.. 直接起こせないアクション
.. ------------------------------
.. 特記事項に「プレイヤーはこのアクションを直接起こすことが出来ない。」
.. と記載されているアクションは、
.. プレイヤーがチャンスを持っていても
.. アクションを起こすことができません。
.. また、この特記事項が記載されたアクションが何らかの起因で起きても、プレイヤーが起こした訳ではないためパスは自動的に発生せず、チャンスは移りません。


.. .. index::
..     single: エクストラ

.. .. _extra:

.. エクストラ
.. ==============================
.. エクストラではアクションに加え切札の能力を使うことができます。
.. 使用できるアクション、切札は対戦レギュレーションを確認してください。

.. .. index::
..     single: き|切札

.. ------------------------------
.. 切札
.. ------------------------------
.. 切札とは、切札領域に置かれたカードを示します。
.. 具体的な切札の置き場所については、 :numref:`field-ex` を参照して下さい。
.. 切札には各々能力が割り当てられており、表にするとその能力が有効になります。
.. 切札を操作するアクションは、「エクストラリスト」を参照して下さい。


.. ------------------------------
.. バージョン
.. ------------------------------
.. エクストラには、バージョンが存在します。
.. 対戦を開始する前に対戦相手とバージョンの確認をしましょう。


.. 版数との関係
.. ------------------------------
.. 版数毎に使える切札の種類が異なります。
.. たとえば、第一版、第二版ではエクストラで遊ぶことはできません。
.. 第三版以降は、次版が出るまでの間に公開された切札であれば使用できます。

.. バージョンは以下のような命名規則になっています。

.. .. code-block::

..     ex{版数}.{切札枚数}.{更新回数}

.. 各々は次の意味になります。

.. 版数
..     対応する版数

.. 切札枚数
..     定義されている切札の枚数

.. 更新回数
..     定義されてから時点から更新された回数。0始まりで、版数が更新されるたびにリセットされます。

.. 例えば、次のように表記されています。

.. .. code-block::

..     ex5.30.2



.. .. _extra-start:

.. ------------------------------
.. ゲームのはじめ方
.. ------------------------------
.. エクストラでは、切札を置いてからゲームを始めます。
.. 切札を置くルールは次のようになっています。(:numref:`trump`)

..  * 対戦前に裏向きで2枚まで切札を置くことができる。
..  * 切札はライフと角度を変えて交わるようにライフの下に置く。
..  * 切札を表にするときはスートと数字が見えるようにし、対応する能力の名称を言う。
..  * ライフが0枚になった場合、切札が残っていても敗北する。
..  * 能力が割り当てられていないカードも切札にできるが、表になっても能力が有効にならない。

.. .. _trump:
.. .. figure:: images/trump.*

..     切札の置き方

.. これ以降は、通常のゲームの始め方と同様です。

.. ------------------------------
.. 切札の能力
.. ------------------------------
.. エクストラでは切札を使って能力を得ることができます。
.. 切札1枚毎に異なった能力が割り当てられており、
.. 表にすることで能力が有効になります。
.. 割り当てられている能力については、「エクストラリスト」を参照して下さい。

.. 能力を有効にする
.. ------------------------------
.. 切札に割り当てられた能力は
.. 「オープン」アクションを起こし表にすることで有効になります。(:numref:`trump-open`)
.. 「オープン」アクションの詳細は、 :numref:`extralist` を参照して下さい。
.. 切札が表でいる限り、
.. その切札の能力は持続的に有効になります。
.. また切札を表にする時は、
.. 対戦相手に有効となった能力が分かるように、
.. 能力の名称を言いスートと数字が見えるようにしましょう。

.. .. _trump-open:
.. .. figure:: images/trump-open.*

..     切札を表にする例

.. 能力を無効する
.. ------------------------------
.. 切札は裏向きもしくは、
.. 墓地に移されると能力が無効になります。
.. 切札を無効化するためには、「クローズ」アクションを用い
.. 切札を裏向きにするか、
.. 「切札破壊」アクションを用いて切札を破壊しましょう。
.. 「クローズ」アクション、
.. 「切札破壊」アクションの詳細は、 :numref:`extralist` を参照して下さい。


.. ------------------------------
.. エクストラ注意事項
.. ------------------------------

.. 1ターンに1回制限のアクションについて
.. ------------------------------------------------------------

.. 切札がもたらすアクションの中には「プレイヤーは1ターンに1回しかこのアクションを起こすことができない。」
.. と特記事項に記載されているものがあります。
.. このアクションは1ターンに1回しか起こすことができないため、
.. 切札が無効化され再度オープンし有効となっても、そのターンを通して1回しか起こすことができません。


その他のルール
==============================

この章では、
公開レベルやシャッフルの仕方といった
細かな決まりごとを説明します。

------------------------------
公開レベル
------------------------------
配置されているカードには、アクションの効果
を使わなくても中身や枚数を知れるものがあります。
知れる度合いには次の種類があります。

完全公開
 全てのプレイヤーが知ることができ、
 聞かれたプレイヤーは正しく答える必要がある

個人公開
 ライフの持ち主のみ知ることができる

非公開
 全てのプレイヤーは知ることができない

完全公開の情報であれば、ゲーム中いつでも対戦相手に聞くことができます。
各カードの配置と公開・非公開の度合いは次のとおりです。

ライフ
 | 完全公開：10枚未満のライフ枚数
 | 個人公開：ライフの枚数
 | 非公開：ライフの中身

墓地
 | 完全公開：墓地の一番上のカード
 | 個人公開：墓地の中身
 | 非公開：なし

場
 | 完全公開：表裏を変えずに見えるカード
 | 個人公開：伏せてあるカード
 | 非公開：なし

手札
 | 完全公開：手札の枚数
 | 個人公開：手札の中身
 | 非公開：なし

フォグ
 | 完全公開：表裏を変えずに見えるカード
 | 個人公開：伏せてあるカード
 | 非公開：なし


残りライフを聞かれたらどうしたらいいの？
------------------------------------------------------------

対戦相手から残りのライフを聞かれた場合、自分のライフの枚数を10枚まで数えます。
10枚未満であれば枚数を答え、10枚以上の場合「10枚以上です」と答えて下さい。
10枚以上の場合、正確な枚数を答える必要はありません。


墓地の一番上のカードはいつ決まるのか？
------------------------------------------------------------
カードを墓地に移す際に移すカードの中から1枚を公開してください。
すでに墓地にあるカードを改めて公開しないでください。


------------------------------
デッキのシャッフルについて
------------------------------
BlackPokerでは
コンセプトの一つに「相手のカードに触らない」があるため、
対戦相手にデッキのシャッフルをお願いする必要はありません。

ただし、シャッフルしてほしい場合は、対戦相手にお願いしても構いません。
逆に、対戦相手があまりシャッフルしていない場合は、
さらにシャッフルをお願いできます。


------------------------------
防壁の置き方
------------------------------
防壁を場に出す際は、次のルールに従って配置してください。(:numref:`set-bulwork`)

* 防壁を置く際は、ライフ側に寄せて配置してください。
* 防壁の左右の入れ替えは行わないでください。

.. _set-bulwork:
.. figure:: images/set-bulwork.*

    防壁の置き方


------------------------------
フォグの置き方
------------------------------
フォグにアップなどのカードを置く場合は、次のルールに従って配置してください。(:numref:`set-fog`)

* 対象の向きにカードを傾けて置いてください。
* ダウンなど対戦相手のカードを対象とする場合も同様に置いてください。
* フォースなど対象を取らない場合は、対象がないため、傾ける必要はありません。
* フォグのカードは、場のカードと重ならないように間隔を空けて配置してください。

.. _set-fog:
.. figure:: images/set-fog.*

    フォグの置き方


------------------------------
ステージの置き方
------------------------------
ステージ上にあるリクエストのキーカードは、場のカードと区別できるように、次のルールに従って配置してください。(:numref:`set-stage`)

* ステージ上にあるリクエストのキーカードは傾けて置いてください。
* フォグと区別できるように置いてください。
* 対象がある場合は、その方向に傾けることを推奨します。

.. _set-stage:
.. figure:: images/set-stage.*

    ステージの置き方
